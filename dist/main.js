(()=>{"use strict";const e=["carrier","battleship","cruiser","submarine","destroyer"],t=e=>Math.floor(Math.random()*e),r=(e=10)=>[t(e),t(e)],n=()=>{let t=Array(10).fill(null).map((()=>Array(10).fill(null))),n=[];const i=(e,t,r,n)=>{let i=t+r,l=e;return"vertical"===n&&(i=t,l=e+r),[l,i]},l=(e,r,l)=>{const a=e.getDirection(),c=((e,r,n,l)=>{const a=[];for(let c=0;c<e;c++){const[e,s]=i(n,l,c,r);if(!(e<10&&s<10))return!1;a.push(t[e][s])}return a.every((e=>null===e))})(e.length,a,r,l);if(c){for(let n=0;n<e.length;n++){const[c,s]=i(r,l,n,a);t[c][s]={ship:e,index:n}}return n.push(e),c}return c},a=e=>{const[t,n]=r();Math.random()>.5&&e.changeDirection(),l(e,t,n)||a(e)};return{getBoard:()=>t,areAllShipsPlaced:()=>n.length===e.length,placeShip:l,receiveAttack:(e,r)=>(null===t[e][r]?t[e][r]="miss":t[e][r].ship&&(t[e][r].ship.hit(t[e][r].index),t[e][r]="hit"),t[e][r]),areAllShipsSunk:()=>n.every((e=>e.isSunk())),reset:()=>{t=Array(10).fill(null).map((()=>Array(10).fill(null))),n=[]},autoPlaceFleet:e=>{for(const t in e)a(e[t])}}},i={carrier:5,battleship:4,cruiser:3,submarine:3,destroyer:2},l=e=>{const t=e,r=i[e];let n="horizontal";const l=Array(r).fill(null);return{id:t,length:r,getDirection:()=>n,changeDirection:()=>{n="horizontal"===n?"vertical":"horizontal"},hit:e=>l[e]="hit",getHits:()=>l,isSunk:()=>l.every((e=>"hit"===e))}},a=e=>{const t={};return e.forEach((e=>t[e]=l(e))),t},c=t=>{let n=a(e);const i=e=>{const[t,n]=r(),l=e.getBoard()[t][n];"miss"===l||"hit"===l?i(e):e.receiveAttack(t,n)};return{getType:()=>t,getFleet:()=>n,attack:(e,t,r)=>r.receiveAttack(e,t),autoAttack:i,resetFleet:()=>n=a(e)}},s=document.querySelector(".winner-container"),o=document.querySelector(".winner-info"),u=(()=>{const e=(e,t,r)=>`<div class="grid-cell cell-${e}-${t} ${r}" data-y='${e}' data-x='${t}'></div>`;return{renderGrid:(t,r,n)=>{(e=>{e.textContent=""})(t);const i=r.getBoard(),{length:l}=i;let a="";for(let t=0;t<l;t++)for(let r=0;r<l;r++){let n=i[t][r];null===n?n="":n.ship&&(n=n.ship.id),a+=e(t,r,n)}t.insertAdjacentHTML("afterbegin",a)},renderWinner:e=>{s.classList.toggle("active"),o.textContent=e}}})(),d=document.querySelector(".grid-p1"),h=document.querySelector(".grid-p2"),p=()=>{const e=c("human"),t=c("computer"),r=n(),i=n(),a=l("carrier");r.placeShip(a,0,0);const s=l("battleship");i.placeShip(s,0,0);const o=()=>{u.renderGrid(d,r,e.getType()),u.renderGrid(h,i,t.getType())},p=n=>{const l=n.target;if(l.classList.contains("grid-cell")){const{y:n}=l.dataset,{x:a}=l.dataset,c=i.getBoard()[n][a];if("miss"!==c&&"hit"!==c&&(e.attack(n,a,i),t.autoAttack(r),o()),r.areAllShipsSunk()||i.areAllShipsSunk()){let e="";r.areAllShipsSunk()?e="Computer wins!":i.areAllShipsSunk()&&(e="Human wins!"),h.removeEventListener("click",p),u.renderWinner(e)}}};return{renderGrids:o,addAttackEventListener:()=>{h.addEventListener("click",p)}}};p().renderGrids(),p().addAttackEventListener()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,