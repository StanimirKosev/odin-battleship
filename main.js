(()=>{"use strict";const e=["carrier","battleship","cruiser","submarine","destroyer"],t=e=>Math.floor(Math.random()*e),r=(e=10)=>[t(e),t(e)],i=()=>{let t=Array(10).fill(null).map((()=>Array(10).fill(null))),i=[];const n=(e,t,r,i)=>{let n=t+r,l=e;return"vertical"===i&&(n=t,l=e+r),[l,n]},l=(e,r,l)=>{const a=e.getDirection(),c=((e,r,i,l)=>{const a=[];for(let c=0;c<e;c++){const[e,s]=n(i,l,c,r);if(!(e<10&&s<10))return!1;a.push(t[e][s])}return a.every((e=>null===e))})(e.length,a,r,l);if(c){for(let i=0;i<e.length;i++){const[c,s]=n(r,l,i,a);t[c][s]={ship:e,index:i}}return i.push(e),c}return c},a=e=>{const[t,i]=r();Math.random()>.5&&e.changeDirection(),l(e,t,i)||a(e)};return{getBoard:()=>t,areAllShipsPlaced:()=>i.length===e.length,placeShip:l,receiveAttack:(e,r)=>(null===t[e][r]?t[e][r]="miss":t[e][r].ship&&(t[e][r].ship.hit(t[e][r].index),t[e][r]="hit"),t[e][r]),areAllShipsSunk:()=>i.every((e=>e.isSunk())),reset:()=>{t=Array(10).fill(null).map((()=>Array(10).fill(null))),i=[]},autoPlaceFleet:e=>{for(const t in e)a(e[t])}}},n={carrier:5,battleship:4,cruiser:3,submarine:3,destroyer:2},l=e=>{const t=e,r=n[e];let i="horizontal";const l=Array(r).fill(null);return{id:t,length:r,getDirection:()=>i,changeDirection:()=>{i="horizontal"===i?"vertical":"horizontal"},hit:e=>l[e]="hit",getHits:()=>l,isSunk:()=>l.every((e=>"hit"===e))}},a=e=>{const t={};return e.forEach((e=>t[e]=l(e))),t},c=t=>{let i=a(e);const n=e=>{const[t,i]=r(),l=e.getBoard()[t][i];"miss"===l||"hit"===l?n(e):e.receiveAttack(t,i)};return{getType:()=>t,getFleet:()=>i,attack:(e,t,r)=>r.receiveAttack(e,t),autoAttack:n,resetFleet:()=>i=a(e)}},s=(()=>{const e=(e,t,r)=>`<div class="grid-cell cell-${e}-${t} ${r}" data-y='${e}' data-x='${t}'></div>`;return{renderGrid:(t,r,i)=>{const n=r.getBoard(),{length:l}=n;let a="";for(let t=0;t<l;t++)for(let r=0;r<l;r++){let i=n[t][r];null===i?i="":i.ship&&(i=i.ship.id),a+=e(t,r,i)}t.insertAdjacentHTML("afterbegin",a)}}})(),o=document.querySelector(".grid-p1"),h=document.querySelector(".grid-p2");(()=>{const e=c("human"),t=c("computer"),r=i(),n=i(),a=l("carrier");r.placeShip(a,0,0);const u=l("battleship");return n.placeShip(u,0,0),{renderGrids:()=>{s.renderGrid(o,r,e.getType()),s.renderGrid(h,n,t.getType())}}})().renderGrids()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,