(()=>{"use strict";const e=["carrier","battleship","cruiser","submarine","destroyer"],t=e=>Math.floor(Math.random()*e),r=(e=10)=>[t(e),t(e)],n=()=>{let t=Array(10).fill(null).map((()=>Array(10).fill(null))),n=[];const l=(e,t,r,n)=>{let l=t+r,i=e;return"vertical"===n&&(l=t,i=e+r),[i,l]},i=(e,r,i)=>{const a=e.getDirection(),c=((e,r,n,i)=>{const a=[];for(let c=0;c<e;c++){const[e,o]=l(n,i,c,r);if(!(e<10&&o<10))return!1;a.push(t[e][o])}return a.every((e=>null===e))})(e.length,a,r,i);if(c){for(let n=0;n<e.length;n++){const[c,o]=l(r,i,n,a);t[c][o]={ship:e,index:n}}return n.push(e),c}return c},a=e=>{const[t,n]=r();Math.random()>.5&&e.changeDirection(),i(e,t,n)||a(e)};return{getBoard:()=>t,areAllShipsPlaced:()=>n.length===e.length,placeShip:i,receiveAttack:(e,r)=>(null===t[e][r]?t[e][r]="miss":t[e][r].ship&&(t[e][r].ship.hit(t[e][r].index),t[e][r]="hit"),t[e][r]),areAllShipsSunk:()=>n.every((e=>e.isSunk())),reset:()=>{t=Array(10).fill(null).map((()=>Array(10).fill(null))),n=[]},autoPlaceFleet:e=>{for(const t in e)a(e[t])}}},l={carrier:5,battleship:4,cruiser:3,submarine:3,destroyer:2},i=e=>{const t={};return e.forEach((e=>t[e]=(e=>{const t=e,r=l[e];let n="horizontal";const i=Array(r).fill(null);return{id:t,length:r,getDirection:()=>n,changeDirection:()=>{n="horizontal"===n?"vertical":"horizontal"},hit:e=>i[e]="hit",getHits:()=>i,isSunk:()=>i.every((e=>"hit"===e))}})(e))),t},a=t=>{let n=i(e);const l=e=>{const[t,n]=r(),i=e.getBoard()[t][n];"miss"===i||"hit"===i?l(e):e.receiveAttack(t,n)};return{getType:()=>t,getFleet:()=>n,attack:(e,t,r)=>r.receiveAttack(e,t),autoAttack:l,resetFleet:()=>n=i(e)}},c=document.querySelector(".winner-container"),o=document.querySelector(".winner-info"),s=document.querySelector(".buttons-container"),u=document.querySelector(".auto-place"),d=(()=>{const e=(e,t,r)=>`<div class="grid-cell cell-${e}-${t} ${r}" data-y='${e}' data-x='${t}'></div>`;return{renderGrid:(t,r,n)=>{(e=>{e.textContent=""})(t);const l=r.getBoard(),{length:i}=l;let a="";for(let t=0;t<i;t++)for(let r=0;r<i;r++){let i=l[t][r];null===i?i="":i.ship&&(i="human"===n?i.ship.id:""),a+=e(t,r,i)}t.insertAdjacentHTML("afterbegin",a)},renderWinner:e=>{c.classList.add("active"),o.textContent=e},startGame:()=>{s.classList.add("hide"),u.setAttribute("disabled","")}}})(),h=document.querySelector(".grid-p1"),p=document.querySelector(".grid-p2"),g=()=>{const e=a("human"),t=a("computer"),r=n(),l=n(),i=()=>{d.renderGrid(h,r,e.getType()),d.renderGrid(p,l,t.getType())},c=n=>{const a=n.target;if(a.classList.contains("grid-cell")){const{y:n}=a.dataset,{x:o}=a.dataset,s=l.getBoard()[n][o];if("miss"!==s&&"hit"!==s&&(e.attack(n,o,l),t.autoAttack(r),i()),r.areAllShipsSunk()||l.areAllShipsSunk()){let e="";r.areAllShipsSunk()?e="Computer Fleet wins!":l.areAllShipsSunk()&&(e="Human Fleet wins!"),p.removeEventListener("click",c),d.renderWinner(e)}}};return{renderGrids:i,autoPlace:()=>{r.reset(),r.autoPlaceFleet(e.getFleet()),l.autoPlaceFleet(t.getFleet()),i(),p.addEventListener("click",(e=>{d.startGame(),c(e)}))}}},m=document.querySelector(".auto-place"),y=document.querySelector(".play-again"),S=document.querySelector(".my-link");g().renderGrids(),m.addEventListener("click",(()=>{g().autoPlace()})),y.addEventListener("click",(()=>{S.click()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,